type Query {
  serviceInfo: ServiceInfo!
  i18n(language: ID!): I18N

  self: Self!
  challenger(id: ID!): Challenger
  challengers(page: Int!, offset: Int!): [Challenger!]!

  problem(id: ID!): Problem
  problems(
    page: Int = 0
    offset: Int = 20
    option: ProblemOptionInput
  ): Problems

  ranking(challengerId: ID!, rankingOption: RankingOptionInput): Ranking
  rankings(
    page: Int = 0
    offset: Int = 20
    rankingOption: RankingOptionInput
  ): Rankings
}

type Mutation {
  refreshToken(authToken: String!): String

  modifyNameOfSelf(name: String!): Boolean
  modifyProfileTextOfSelf(text: String!): Boolean
  addAnswerToProblem(problemId: ID!, answer: ChallengerAnswer!): Answer!

  changeLanguage(languageId: String!): Boolean
}

input ProblemOptionInput {
  kind: ID
  sortBy: ID
  filterBy: ID
}

input RankingOptionInput {
  kind: ID
  sortBy: ID
  filterBy: ID
}

input ChallengerAnswer {
  language: ID!
  source: String!
}

interface Node {
  id: ID!
  createdAt: String!
}

interface PageInfo {
  hasPrevious: Boolean!
  hasNext: Boolean!
}

interface User {
  id: String!
  name: String!
  role: String!
}

interface Option {
  id: String!
  name: String!
  description: String!
}

type ServiceInfo {
  """
  application name
  """
  appName: String!
  description: String
  catchPhrase: String
  """
  support languages
  """
  languages: [ProgrammingLanguage!]!
  """
  support OJIC version
  """
  version: String!
  """
  support OJIC level
  """
  level: Int!
}

type ProgrammingLanguage implements Node {
  id: ID!
  """
  e.g. C++
  """
  name: String!
  """
  e.g. C++: 17
  """
  version: String!
  """
  e.g. C++: gcc (x86_64-posix-seh, Built by strawberryperl.com project) 7.1.0
  """
  runtime: String!
  command: Command!
  maxTime: Int!
  maxMemory: Int!
  """
  support libraries with language
  """
  libraries: [Library]!
  """
  ISO 8601
  """
  createdAt: String!
}

type Command {
  """
  command in compile time
  """
  compile: String
  """
  command in execution time
  """
  execute: String!
}

type Library {
  name: String!
  version: String!
}

type I18N {
  userRoles: [UserRole!]!
  rankingOptions: [RankingOption!]!
}

type UserRole implements Option {
  id: String!
  name: String!
  description: String!
}

type RankingOption {
  id: String!
  name: String!
  description: String!
  sortBy: [SortBy!]!
  filterBy: [FilterBy!]!
}

type SortBy implements Option {
  id: String!
  name: String!
  description: String!
}

type FilterBy implements Option {
  id: String!
  name: String!
  description: String!
}

type Self implements User {
  id: String!
  name: String!
  role: String!
}

"""
a user who can submit an answer to a problem.
"""
type Challenger implements User {
  id: String!
  name: String!
  role: String!
}

type Problem implements Node {
  id: ID!
  title: String
  tags: [String!]!
  languages: [ProgrammingLanguage!]!
  explains: [Explain!]!
  samples: [Sample!]!
  createdAt: String!
}

type Problems {
  pageInfo: ProblemPageInfo!
  problems: [Problem!]!
}

type ProblemPageInfo implements PageInfo {
  hasPrevious: Boolean!
  hasNext: Boolean!
}

type Explain {
  """
  ISO 639-1
  """
  language: String!
  mimeType: String
  text: String
}

"""
I/O that guarantee the same input/output when scored as a correct answer to a particular problem.
"""
type Sample {
  input: String!
  output: String!
}

type Answer {
  source: String!
  """
  ISO 639-1
  """
  language: String!
  state: AnswerState!
  info: AnswerInfo
}

enum AnswerState {
  Submitted
  Initialized
  Judging
  Completed
}

type AnswerInfo {
  result: ResultResult!
  usedMemories: Int!
  usedTimes: Int!
}

enum ResultResult {
  CorrectAnswer
  WrongAnswer
  CompilationError
  RuntimeError
  TimeLimitExceeded
  FormatError
}

type Statistics {
  problemCount: Int!
  answersCount: Int!
}

type Ranking {
  challenger: Challenger!
}

type Rankings {
  pageInfo: RankingPageInfo!
  challengers: [Challenger!]!
}

type RankingPageInfo implements PageInfo {
  hasPrevious: Boolean!
  hasNext: Boolean!
}

type RankingKind implements Option {
  id: String!
  name: String!
  description: String!
}
