"""
The DateTime scalar type represents textual data, represented as ISO-8601 format.
"""
scalar DateTime

type Query {
  """
  Details about the application.
  """
  appInfo: AppInfo!
  """
  Details about self.
  """
  self: Self!
  challenger(id: ID!): Challenger
  challengers(page: Int!, offset: Int!): [Challenger!]!

  problem(id: ID!): Problem
  problems(
    page: Int = 0
    offset: Int = 20
    option: ProblemOptionInput
  ): Problems

  ranking(challengerId: ID!, rankingOption: RankingOptionInput): Ranking
  rankings(
    page: Int = 0
    offset: Int = 20
    rankingOption: RankingOptionInput
  ): Rankings
}

type Mutation {
  refreshToken(authToken: String!): String

  modifyNameOfSelf(name: String!): Boolean
  modifyProfileTextOfSelf(text: String!): Boolean
  addAnswerToProblem(problemId: ID!, answer: ChallengerAnswer!): Answer!

  changeLanguage(languageId: String!): Boolean
}

input ProblemOptionInput {
  kind: ID
  sortBy: ID
  filterBy: ID
}

input RankingOptionInput {
  kind: ID
  sortBy: ID
  filterBy: ID
}

input ChallengerAnswer {
  language: ID!
  source: String!
}

interface Node {
  id: ID!
  createdAt: DateTime!
}

interface PageInfo {
  hasPrevious: Boolean!
  hasNext: Boolean!
}

interface User {
  id: ID!
  name: String!
  role: Role!
  createdAt: DateTime!
}

interface Identifiable {
  name: String!
  url: String!
}

interface Option {
  id: String!
  name: String!
  description: String!
}

"""
Application information that the client can pre-cache to improve performance.
"""
type AppInfo {
  """
  The name of the application.
  """
  name: String!
  """
  A description of the application.
  """
  description: String
  """
  A catchphrase of the application.
  """
  catchPhrase: String
  """
  Current OJIC supported version of the application.
  """
  version: String!
  """
  Current OJIC supported level of the application.
  """
  level: Int!
  """
  Languages that supports the judging of the source code of the answers in the application.
  """
  languages(id: ID! = null): [Language!]!
  """
  Programming languages that supports the judging of the source code of the answers in the application.
  """
  programmingLanguages: [ProgrammingLanguage!]!
  """
  A collection of roles for the application.
  """
  roles: [Role!]!
  """

  """
  rankingOptions: [RankingOption!]!
}

"""
The language people-to-people use to communicate, such as Korean, English, and Japanese.
"""
type Language implements Node {
  """
  The identifier, represented as ISO-639-1 format.
  """
  id: ID!
  """
  The string, represented as ISO language name.
  """
  name: String!
  """
  The time when the application started supporting the language.
  """
  createdAt: DateTime!
}

"""
A programming language that can be used to solve problems.
"""
type ProgrammingLanguage implements Node {
  """
  An identifier used to identify the language.
  """
  id: ID!
  """
  A name that refers to the programming language, such a C++.
  """
  name: String!
  """
  A more detailed name for the programming language, such a C++17.
  """
  detailName: String!
  """
  The runtime of the programming language used by the application to judge the source code of the answers, such a gcc (x86_64-posix-seh, Built by strawberryperl.com project) 7.1.0.
  """
  runtime: String!
  """
  Commands used to judge answer source code.
  """
  commands: Commands!
  """
  The time from the answer source code execution to the forced termination.
  """
  maxTime: Int!
  """
  Total memory available after source code execution.
  """
  maxMemory: Int!
  """
  libraries that can be used when solving problems in this language.
  """
  libraries: [Library]!
  """
  The time when the application started supporting the language.
  """
  createdAt: DateTime!
}

"""
The commands used to compile or execute the source code.
"""
type Commands {
  """
  command in compile time.
  """
  compile: String
  """
  command in execution time.
  """
  execute: String!
}

"""
Additional libraries available in the programming language environment.
"""
type Library {
  name: String!
  version: String!
}

"""
Role such as administrator, organizer.
"""
type Role implements Option {
  id: String!
  name: String!
  description: String!
}

type RankingOption {
  id: String!
  name: String!
  description: String!
  sortBy: [SortBy!]!
  filterBy: [FilterBy!]!
}

type SortBy implements Option {
  id: String!
  name: String!
  description: String!
}

type FilterBy implements Option {
  id: String!
  name: String!
  description: String!
}

"""

"""
type Self implements User {
  id: ID!
  name: String!
  role: Role!
  createdAt: DateTime!
}

"""
a user who can submit an answer to a problem.
"""
type Challenger implements User {
  id: ID!
  name: String!
  role: Role!
  createdAt: DateTime!
}

type Problem implements Node {
  id: ID!
  title: String
  wirter: ProblemWriter
  creator: [ProblemCreator!]!
  translator: [ProblemTranslator!]!
  contributor: [ProblemContributor!]!
  tags: [String!]!
  programmingLanguages: [ProgrammingLanguage!]!
  explains(languages: [ID!] = null): [Explain!]!
  samples: [Sample!]!
  createdAt: DateTime!
}

type ProblemWriter implements User {
  id: ID!
  name: String!
  role: Role!
  createdAt: DateTime!
}

type ProblemCreator implements Identifiable {
  name: String!
  url: String!
}

type ProblemTranslator implements Identifiable {
  name: String!
  url: String!
}

type ProblemContributor implements Identifiable {
  name: String!
  url: String!
}

type Problems {
  pageInfo: ProblemPageInfo!
  problems: [Problem!]!
}

type ProblemPageInfo implements PageInfo {
  hasPrevious: Boolean!
  hasNext: Boolean!
}

type Explain {
  """
  ISO 639-1
  """
  languages: [Language!]!
  mimeType: String
  text: String
}

"""
I/O that guarantee the same input/output when scored as a correct answer to a particular problem.
"""
type Sample {
  input: String!
  output: String!
}

type Answer {
  source: String!
  """
  ISO 639-1
  """
  language: String!
  state: AnswerState!
  info: AnswerInfo
}

enum AnswerState {
  Submitted
  Initialized
  Judging
  Completed
}

type AnswerInfo {
  result: ResultResult!
  usedMemories: Int!
  usedTimes: Int!
}

enum ResultResult {
  CorrectAnswer
  WrongAnswer
  CompilationError
  RuntimeError
  TimeLimitExceeded
  FormatError
}

type Statistics {
  problemCount: Int!
  answersCount: Int!
}

type Ranking {
  challenger: Challenger!
}

type Rankings {
  pageInfo: RankingPageInfo!
  challengers: [Challenger!]!
}

type RankingPageInfo implements PageInfo {
  hasPrevious: Boolean!
  hasNext: Boolean!
}

type RankingKind implements Option {
  id: String!
  name: String!
  description: String!
}
